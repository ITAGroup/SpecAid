// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecAidTests.CsvTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CsvParseTestingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CsvParseTesting.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CsvParseTesting", "", ProgrammingLanguage.CSharp, new string[] {
                        "CsvTests"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "CsvParseTesting")))
            {
                SpecAidTests.CsvTests.CsvParseTestingFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Basic")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingBasic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Basic", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("String \'a,b,c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table1.AddRow(new string[] {
                        "a"});
            table1.AddRow(new string[] {
                        "b"});
            table1.AddRow(new string[] {
                        "c"});
#line 6
 testRunner.Then("List", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Wider")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingWider()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Wider", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("String \'aa,bb,cc\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table2.AddRow(new string[] {
                        "aa"});
            table2.AddRow(new string[] {
                        "bb"});
            table2.AddRow(new string[] {
                        "cc"});
#line 14
 testRunner.Then("List", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Trim Spaces")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingTrimSpaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Trim Spaces", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("String \' a , b , c \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table3.AddRow(new string[] {
                        "\"a\""});
            table3.AddRow(new string[] {
                        "\"b\""});
            table3.AddRow(new string[] {
                        "\"c\""});
#line 22
 testRunner.Then("List", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Don\'t Trim Spaces")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingDonTTrimSpaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Don\'t Trim Spaces", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("String \'\" a \",\" b \",\" c \"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table4.AddRow(new string[] {
                        "\"\" a \"\""});
            table4.AddRow(new string[] {
                        "\"\" b \"\""});
            table4.AddRow(new string[] {
                        "\"\" c \"\""});
#line 30
 testRunner.Then("List", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Time Some Leave Some")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingTimeSomeLeaveSome()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Time Some Leave Some", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("String \' \" a \" , \" b \" , \" c \" \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table5.AddRow(new string[] {
                        "\"\" a \"\""});
            table5.AddRow(new string[] {
                        "\"\" b \"\""});
            table5.AddRow(new string[] {
                        "\"\" c \"\""});
#line 38
 testRunner.Then("List", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting First Quoted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingFirstQuoted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting First Quoted", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
 testRunner.Given("String \'\"a\",b,c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table6.AddRow(new string[] {
                        "\"\"a\"\""});
            table6.AddRow(new string[] {
                        "b"});
            table6.AddRow(new string[] {
                        "c"});
#line 46
 testRunner.Then("List", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Middle Quoted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingMiddleQuoted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Middle Quoted", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given("String \'a,\"b\",c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table7.AddRow(new string[] {
                        "a"});
            table7.AddRow(new string[] {
                        "\"\"b\"\""});
            table7.AddRow(new string[] {
                        "c"});
#line 54
 testRunner.Then("List", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Last Quoted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingLastQuoted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Last Quoted", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("String \'a,b,\"c\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table8.AddRow(new string[] {
                        "a"});
            table8.AddRow(new string[] {
                        "b"});
            table8.AddRow(new string[] {
                        "\"\"c\"\""});
#line 62
 testRunner.Then("List", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting One")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting One", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
 testRunner.Given("String \'a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table9.AddRow(new string[] {
                        "a"});
#line 70
 testRunner.Then("List", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting None")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingNone()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting None", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
 testRunner.Given("String \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
#line 76
 testRunner.Then("List", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Comma")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingComma()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Comma", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
 testRunner.Given("String \',\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table11.AddRow(new string[] {
                        ""});
            table11.AddRow(new string[] {
                        ""});
#line 81
 testRunner.Then("List", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Commas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingCommas()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Commas", ((string[])(null)));
#line 86
this.ScenarioSetup(scenarioInfo);
#line 87
 testRunner.Given("String \',\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table12.AddRow(new string[] {
                        ""});
            table12.AddRow(new string[] {
                        ""});
#line 88
 testRunner.Then("List", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Starting Comma")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingStartingComma()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Starting Comma", ((string[])(null)));
#line 93
this.ScenarioSetup(scenarioInfo);
#line 94
 testRunner.Given("String \',a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table13.AddRow(new string[] {
                        ""});
            table13.AddRow(new string[] {
                        "a"});
#line 95
 testRunner.Then("List", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Ending Comma")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingEndingComma()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Ending Comma", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line 101
 testRunner.Given("String \'a,\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table14.AddRow(new string[] {
                        "a"});
            table14.AddRow(new string[] {
                        ""});
#line 102
 testRunner.Then("List", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Middle Comma")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingMiddleComma()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Middle Comma", ((string[])(null)));
#line 107
this.ScenarioSetup(scenarioInfo);
#line 108
 testRunner.Given("String \'a,,b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table15.AddRow(new string[] {
                        "a"});
            table15.AddRow(new string[] {
                        ""});
            table15.AddRow(new string[] {
                        "b"});
#line 109
 testRunner.Then("List", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Spaces")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingSpaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Spaces", ((string[])(null)));
#line 116
this.ScenarioSetup(scenarioInfo);
#line 117
 testRunner.Given("String \'\" \",\" \",\" \"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table16.AddRow(new string[] {
                        "\"\" \"\""});
            table16.AddRow(new string[] {
                        "\"\" \"\""});
            table16.AddRow(new string[] {
                        "\"\" \"\""});
#line 118
 testRunner.Then("List", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Spaces Ending Comma")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingSpacesEndingComma()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Spaces Ending Comma", ((string[])(null)));
#line 124
this.ScenarioSetup(scenarioInfo);
#line 125
 testRunner.Given("String \'\" \",\" \",\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table17.AddRow(new string[] {
                        "\"\" \"\""});
            table17.AddRow(new string[] {
                        "\"\" \"\""});
            table17.AddRow(new string[] {
                        "\"\""});
#line 126
 testRunner.Then("List", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Spaces Ending Comma With Space")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingSpacesEndingCommaWithSpace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Spaces Ending Comma With Space", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line 133
 testRunner.Given("String \'\" \",\" \", \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table18.AddRow(new string[] {
                        "\"\" \"\""});
            table18.AddRow(new string[] {
                        "\"\" \"\""});
            table18.AddRow(new string[] {
                        "\"\""});
#line 134
 testRunner.Then("List", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Spaces Beginning Comma")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingSpacesBeginningComma()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Spaces Beginning Comma", ((string[])(null)));
#line 140
this.ScenarioSetup(scenarioInfo);
#line 141
 testRunner.Given("String \',\" \",\" \"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table19.AddRow(new string[] {
                        "\"\""});
            table19.AddRow(new string[] {
                        "\"\" \"\""});
            table19.AddRow(new string[] {
                        "\"\" \"\""});
#line 142
 testRunner.Then("List", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CsvTesting Spaces Beginning Comma With Space")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CsvParseTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CsvTests")]
        public virtual void CsvTestingSpacesBeginningCommaWithSpace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CsvTesting Spaces Beginning Comma With Space", ((string[])(null)));
#line 148
this.ScenarioSetup(scenarioInfo);
#line 149
 testRunner.Given("String \' ,\" \",\" \"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "This"});
            table20.AddRow(new string[] {
                        "\"\""});
            table20.AddRow(new string[] {
                        "\"\" \"\""});
            table20.AddRow(new string[] {
                        "\"\" \"\""});
#line 150
 testRunner.Then("List", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
