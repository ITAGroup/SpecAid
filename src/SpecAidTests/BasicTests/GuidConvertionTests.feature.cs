// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecAidTests.BasicTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GuidConvertionTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GuidConvertionTests.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GuidConvertionTests", "", ProgrammingLanguage.CSharp, new string[] {
                        "TypeConvertionTestsSteps"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "GuidConvertionTests")))
            {
                SpecAidTests.BasicTests.GuidConvertionTestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GuidConvertionTests - Regular Guid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GuidConvertionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConvertionTestsSteps")]
        public virtual void GuidConvertionTests_RegularGuid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GuidConvertionTests - Regular Guid", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "aGuid"});
            table1.AddRow(new string[] {
                        "11ab0769-41cb-4655-b05d-621cc17585d4"});
#line 5
    testRunner.Given("There are EveryThing Objects", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "aGuid"});
            table2.AddRow(new string[] {
                        "11ab0769-41cb-4655-b05d-621cc17585d4"});
#line 9
    testRunner.Then("There are EveryThing Objects", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GuidConvertionTests - Nullable Guid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GuidConvertionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConvertionTestsSteps")]
        public virtual void GuidConvertionTests_NullableGuid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GuidConvertionTests - Nullable Guid", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "aNullableGuid"});
            table3.AddRow(new string[] {
                        "11ab0769-41cb-4655-b05d-621cc17585d4"});
            table3.AddRow(new string[] {
                        "null"});
#line 14
    testRunner.Given("There are EveryThing Objects", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "aNullableGuid"});
            table4.AddRow(new string[] {
                        "11ab0769-41cb-4655-b05d-621cc17585d4"});
            table4.AddRow(new string[] {
                        "null"});
#line 19
    testRunner.Then("There are EveryThing Objects", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GuidConvertionTests - Guid to String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GuidConvertionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConvertionTestsSteps")]
        public virtual void GuidConvertionTests_GuidToString()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GuidConvertionTests - Guid to String", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Tag It",
                        "A String",
                        "A Nullable Guid"});
            table5.AddRow(new string[] {
                        "#eto1",
                        "11ab0769-41cb-4655-b05d-621cc17585d4",
                        "11ab0769-41cb-4655-b05d-621cc17585d4"});
#line 25
    testRunner.Given("There are EveryThing Objects", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "A String"});
            table6.AddRow(new string[] {
                        "#eto1.ANullableGuid"});
#line 29
    testRunner.Then("There are EveryThing Objects", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GuidConvertionTests - Null Guid to Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GuidConvertionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConvertionTestsSteps")]
        public virtual void GuidConvertionTests_NullGuidToNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GuidConvertionTests - Null Guid to Null", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Tag It",
                        "A String",
                        "A Nullable Guid"});
            table7.AddRow(new string[] {
                        "#eto1",
                        "null",
                        "null"});
#line 34
    testRunner.Given("There are EveryThing Objects", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "A String"});
            table8.AddRow(new string[] {
                        "#eto1.ANullableGuid"});
#line 38
    testRunner.Then("There are EveryThing Objects", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GuidConvertionTests - Lower Case Guid to Upper Case String")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GuidConvertionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConvertionTestsSteps")]
        public virtual void GuidConvertionTests_LowerCaseGuidToUpperCaseString()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GuidConvertionTests - Lower Case Guid to Upper Case String", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Tag It",
                        "A String",
                        "A Nullable Guid"});
            table9.AddRow(new string[] {
                        "#eto1",
                        "11AB0769-41CB-4655-B05D-621CC17585D4",
                        "11ab0769-41cb-4655-b05d-621cc17585d4"});
#line 43
    testRunner.Given("There are EveryThing Objects", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "A String"});
            table10.AddRow(new string[] {
                        "#eto1.ANullableGuid"});
#line 47
    testRunner.Then("There are EveryThing Objects", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
