// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecAidTests.BasicTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class IndexerTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IndexerTests.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "IndexerTests", "", ProgrammingLanguage.CSharp, new string[] {
                        "IndexerTestsSteps"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "IndexerTests")))
            {
                SpecAidTests.BasicTests.IndexerTestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("IndexerTests - Basic Find Compare")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IndexerTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("IndexerTestsSteps")]
        public virtual void IndexerTests_BasicFindCompare()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IndexerTests - Basic Find Compare", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field 1",
                        "Field 2",
                        "Field 3",
                        "Field 4",
                        "Field 5",
                        "Field 6"});
            table1.AddRow(new string[] {
                        "I",
                        "can",
                        "set",
                        "any",
                        "field",
                        ""});
#line 5
 testRunner.Given("The String String Dictionary", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field 1",
                        "Field 2",
                        "Field 3",
                        "Field 4",
                        "Field 5",
                        "Field 6"});
            table2.AddRow(new string[] {
                        "I",
                        "can",
                        "set",
                        "any",
                        "field",
                        ""});
#line 9
 testRunner.Then("The String String Dictionary", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("IndexerTests - Basic Find Compare for Ints")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IndexerTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("IndexerTestsSteps")]
        public virtual void IndexerTests_BasicFindCompareForInts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IndexerTests - Basic Find Compare for Ints", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field 1",
                        "Field 2",
                        "Field 3",
                        "Field 4",
                        "Field 5",
                        "Field 6"});
            table3.AddRow(new string[] {
                        "I",
                        "can",
                        "set",
                        "any",
                        "field",
                        ""});
#line 14
 testRunner.Given("The Int String Dictionary", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field 1",
                        "Field 2",
                        "Field 3",
                        "Field 4",
                        "Field 5",
                        "Field 6"});
            table4.AddRow(new string[] {
                        "I",
                        "can",
                        "set",
                        "any",
                        "field",
                        ""});
#line 18
 testRunner.Then("The Int String Dictionary", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("IndexerTests - No Object is Null - Not Explode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IndexerTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("IndexerTestsSteps")]
        public virtual void IndexerTests_NoObjectIsNull_NotExplode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IndexerTests - No Object is Null - Not Explode", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field 1",
                        "Field 2",
                        "Field 3",
                        "Field 4",
                        "Field 5"});
            table5.AddRow(new string[] {
                        "I",
                        "can",
                        "set",
                        "any",
                        "field"});
#line 23
 testRunner.Given("The String String Dictionary", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field 1",
                        "Field 2",
                        "Field 3",
                        "Field 4",
                        "Field 5",
                        "Field6"});
            table6.AddRow(new string[] {
                        "I",
                        "can",
                        "set",
                        "any",
                        "field",
                        "null"});
#line 27
 testRunner.Then("The String String Dictionary", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
