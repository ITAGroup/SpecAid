// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecAidTests.BasicTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TypeConversionTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TypeConversionTests.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TypeConversionTests", "", ProgrammingLanguage.CSharp, new string[] {
                        "TypeConversionTestsSteps"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "TypeConversionTests")))
            {
                SpecAidTests.BasicTests.TypeConversionTestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TypeConversionTests - Int")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TypeConversionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConversionTestsSteps")]
        public virtual void TypeConversionTests_Int()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TypeConversionTests - Int", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "anInt"});
            table1.AddRow(new string[] {
                        "12"});
#line 5
 testRunner.Given("There are EveryThing Objects", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "anInt"});
            table2.AddRow(new string[] {
                        "12"});
#line 9
 testRunner.Then("There are EveryThing Objects", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TypeConversionTests - Enumerable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TypeConversionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConversionTestsSteps")]
        public virtual void TypeConversionTests_Enumerable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TypeConversionTests - Enumerable", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "someStrings"});
            table3.AddRow(new string[] {
                        "[a,b,c]"});
#line 14
 testRunner.Given("There are EveryThing Objects", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "someStrings"});
            table4.AddRow(new string[] {
                        "[a,b,c]"});
#line 18
 testRunner.Then("There are EveryThing Objects", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TypeConversionTests - Enumerable No Brackets")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TypeConversionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConversionTestsSteps")]
        public virtual void TypeConversionTests_EnumerableNoBrackets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TypeConversionTests - Enumerable No Brackets", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "someStrings"});
            table5.AddRow(new string[] {
                        "a,b,c"});
#line 23
 testRunner.Given("There are EveryThing Objects", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "someStrings"});
            table6.AddRow(new string[] {
                        "a,b,c"});
#line 27
 testRunner.Then("There are EveryThing Objects", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TypeConversionTests - Enumerable Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TypeConversionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConversionTestsSteps")]
        public virtual void TypeConversionTests_EnumerableNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TypeConversionTests - Enumerable Null", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "someStrings"});
            table7.AddRow(new string[] {
                        "null"});
#line 32
 testRunner.Given("There are EveryThing Objects", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "someStrings"});
            table8.AddRow(new string[] {
                        "null"});
#line 36
 testRunner.Then("There are EveryThing Objects", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TypeConversionTests - List")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TypeConversionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConversionTestsSteps")]
        public virtual void TypeConversionTests_List()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TypeConversionTests - List", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ListStrings"});
            table9.AddRow(new string[] {
                        "[a,b,c]"});
#line 41
 testRunner.Given("There are EveryThing Objects", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ListStrings"});
            table10.AddRow(new string[] {
                        "[a,b,c]"});
#line 45
 testRunner.Then("There are EveryThing Objects", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TypeConversionTests - List Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TypeConversionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConversionTestsSteps")]
        public virtual void TypeConversionTests_ListNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TypeConversionTests - List Null", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ListStrings"});
            table11.AddRow(new string[] {
                        "null"});
#line 50
 testRunner.Given("There are EveryThing Objects", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ListStrings"});
            table12.AddRow(new string[] {
                        "null"});
#line 54
 testRunner.Then("There are EveryThing Objects", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TypeConversionTests - PlainList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TypeConversionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConversionTestsSteps")]
        public virtual void TypeConversionTests_PlainList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TypeConversionTests - PlainList", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlainList"});
            table13.AddRow(new string[] {
                        "[a,b,c]"});
#line 59
 testRunner.Given("There are EveryThing Objects", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlainList"});
            table14.AddRow(new string[] {
                        "[a,b,c]"});
#line 63
 testRunner.Then("There are EveryThing Objects", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TypeConversionTests - PlainList Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TypeConversionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConversionTestsSteps")]
        public virtual void TypeConversionTests_PlainListNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TypeConversionTests - PlainList Null", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlainList"});
            table15.AddRow(new string[] {
                        "null"});
#line 68
 testRunner.Given("There are EveryThing Objects", ((string)(null)), table15, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlainList"});
            table16.AddRow(new string[] {
                        "null"});
#line 72
 testRunner.Then("There are EveryThing Objects", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TypeConversionTests - Array")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TypeConversionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConversionTestsSteps")]
        public virtual void TypeConversionTests_Array()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TypeConversionTests - Array", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "ArrayStrings"});
            table17.AddRow(new string[] {
                        "[a,b,c]"});
#line 77
 testRunner.Given("There are EveryThing Objects", ((string)(null)), table17, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "ArrayStrings"});
            table18.AddRow(new string[] {
                        "[a,b,c]"});
#line 81
 testRunner.Then("There are EveryThing Objects", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TypeConversionTests - Array Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TypeConversionTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TypeConversionTestsSteps")]
        public virtual void TypeConversionTests_ArrayNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TypeConversionTests - Array Null", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "ArrayStrings"});
            table19.AddRow(new string[] {
                        "null"});
#line 86
 testRunner.Given("There are EveryThing Objects", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "ArrayStrings"});
            table20.AddRow(new string[] {
                        "null"});
#line 90
 testRunner.Then("There are EveryThing Objects", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
