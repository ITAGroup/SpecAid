// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.296
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecAidGitHubSamples.ReportExample
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PersonReportFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PersonReport.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PersonReport", "In order to view a person report\r\nAs a manager\r\nI want to see who are the people " +
                    "that work for me", ProgrammingLanguage.CSharp, new string[] {
                        "TutorialGivenBasicSteps",
                        "TutorialStoresSteps"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "PersonReport")))
            {
                SpecAidGitHubSamples.ReportExample.PersonReportFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("view people")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PersonReport")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TutorialGivenBasicSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TutorialStoresSteps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void ViewPeople()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("view people", new string[] {
                        "Ignore"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Emp Id",
                        "First Name",
                        "Middle Name",
                        "Last Name",
                        "Store",
                        "YearsOfService"});
            table1.AddRow(new string[] {
                        "1",
                        "Fox",
                        "C",
                        "Smith",
                        "<<Red>>",
                        "1"});
            table1.AddRow(new string[] {
                        "2",
                        "Jayne",
                        "",
                        "Cobb",
                        "<<Red>>",
                        "0"});
            table1.AddRow(new string[] {
                        "3",
                        "Sue",
                        "",
                        "Smith",
                        "<<Red>>",
                        "25"});
            table1.AddRow(new string[] {
                        "4",
                        "Jayne",
                        "",
                        "Cobb",
                        "<<Red>>",
                        "26"});
#line 16
 testRunner.Given("I have People", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Tag It",
                        "StoreId",
                        "Name"});
            table2.AddRow(new string[] {
                        "<<Red>>",
                        "42",
                        "Red\'s Brick and Landscaping"});
            table2.AddRow(new string[] {
                        "<<Dig>>",
                        "43",
                        "Dig It"});
#line 23
 testRunner.Given("I have Stores", ((string)(null)), table2, "Given ");
#line 28
 testRunner.When("I view the Person Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "First Name",
                        "Last Name",
                        "Store Name",
                        "Years of Service",
                        "Tenured"});
            table3.AddRow(new string[] {
                        "Fox",
                        "Smith",
                        "Red\'s Brick and Landscaping",
                        "1",
                        "No"});
            table3.AddRow(new string[] {
                        "Jayne",
                        "Cobb",
                        "Red\'s Brick and Landscaping",
                        "5",
                        "Yes"});
            table3.AddRow(new string[] {
                        "Sue",
                        "Smith",
                        "Dig It",
                        "25",
                        "Yes"});
            table3.AddRow(new string[] {
                        "Jayne",
                        "Cobb",
                        "Dig It",
                        "26",
                        "Yes"});
#line 30
 testRunner.Then("I have Person Report", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
